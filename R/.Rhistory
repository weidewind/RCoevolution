names(newdfr) <- c("depth restriction",  "ancestor site_node",	"number of mutations in the subtree",	"maxdepth",	"epistasis (median) pvalue", "epimed FDR")
write.table(newdfr, paste("fdrs", restriction, sep="_"))
})
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, fdrV5$qval)
names(newdfr) <- c("depth restriction",  "ancestor site_node",	"number of mutations in the subtree",	"maxdepth",	"epistasis (median) pvalue", "epimed FDR")
write.table(newdfr, paste("fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
prot <- "h1"
h1pvals <- read.table(paste("../input/", prot, "_sites", sep = ""), sep="\t")
#h1pvals <-as.numeric(h1pvals)
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, fdrV5$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue", "epimed_FDR")
write.table(newdfr, paste(prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, fdrV5$qval,dfr$V6, fdrV6$qval,dfr$V7, fdrV7$qval,dfr$V8, fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue", "epimed_FDR", "epistasis_(mean)_pvalue", "epimean_FDR", "env_(median)_pvalue", "envmed_FDR","env_(mean)_pvalue", "envmean_FDR")
write.table(newdfr, paste(prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste(prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
prot <- "h3"
h1pvals <- read.table(paste("../input/", prot, "_sites", sep = ""), sep="\t")
#h1pvals <-as.numeric(h1pvals)
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste(prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
prot <- "n1"
h1pvals <- read.table(paste("../input/", prot, "_sites", sep = ""), sep="\t")
#h1pvals <-as.numeric(h1pvals)
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste(prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
bhV5 <- p.adjust(dfr$V5, method="BH")
dfr <- h1pvals[h1pvals$V1 == restriction,]
prot <- "h1"
h1pvals <- read.table(paste("../input/", prot, "_sites", sep = ""), sep="\t")
#h1pvals <-as.numeric(h1pvals)
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
bhV5 <- p.adjust(dfr$V5, method="BH")
print(cat(bhV5, sep="\n"))
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste( prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
bhV5 <- p.adjust(dfr$V5, method="BH")
print(cat(bhV5, sep="\n"))
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval, bhV5)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste( prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
prot <- "n2"
h1pvals <- read.table(paste("../input/", prot, "_sites", sep = ""), sep="\t")
#h1pvals <-as.numeric(h1pvals)
fdrs <- lapply(levels(factor(h1pvals$V1)), function(restriction){
dfr <- h1pvals[h1pvals$V1 == restriction,]
fdrV5 <- fdrtool(dfr$V5,statistic="pvalue")
fdrV6 <- fdrtool(dfr$V6,statistic="pvalue")
fdrV7 <- fdrtool(dfr$V7,statistic="pvalue")
fdrV8 <- fdrtool(dfr$V8,statistic="pvalue")
newdfr <- data.frame(dfr$V1,dfr$V2, dfr$V3, dfr$V4, dfr$V5, dfr$V6, dfr$V7, dfr$V8, fdrV5$qval, fdrV6$qval, fdrV7$qval,fdrV8$qval)
names(newdfr) <- c("depth_restriction",  "ancestor_site_node",	"number_of_mutations_in_the_subtree",	"maxdepth",	"epistasis_(median)_pvalue",  "epistasis_(mean)_pvalue",  "env_(median)_pvalue", "env_(mean)_pvalue", "epimed_FDR","epimean_FDR", "envmed_FDR","envmean_FDR")
write.table(newdfr, paste( prot, "fdrs", restriction, sep="_"), quote=FALSE, row.names = F)
})
hist <- read.csv("n1_trailing.csv")
hist <- read.csv("../input/n1_trailing.csv")
chol
head(AirPassengers)
str(AirPassengers)
cut(hist$bin, breaks = seq(from=0, to=600, by=20))
bin_10 <- cut(hist$bin, breaks = seq(from=0, to=600, by=20))
hist <-data.frame(hist, bin_10)
tapply(hist$obs, hist$bin_10, sum)
hist(tapply(hist$obs, hist$bin_10, sum))
obs <-tapply(hist$obs, hist$bin_10, sum)
obs
exp<-tapply(hist$exp, hist$bin_10, sum)
exp
plot(obs)
barplot(obs)
barplot(counts, beside=TRUE)
counts <- table(obs,exp)
barplot(counts, beside=TRUE)
exp<-tapply(hist$exp, hist$bin_10, sum)
barplot(exp)
counts
counts <- as.matrix(data.frame(obs,exp))
counts
barplot(counts, beside=TRUE)
barplot(counts)
barplot(counts, beside=TRUE)
counts
barplot(data.frame(obs,exp), beside=TRUE)
hist <- read.csv("../input/n1_trailing_compl.csv")
bin_10 <- cut(hist$bin, breaks = seq(from=0, to=600, by=20))
hist <-data.frame(hist, bin_10)
obs <-tapply(hist$obs, hist$bin_10, sum)
exp<-tapply(hist$exp, hist$bin_10, sum)
counts <- as.matrix(data.frame(obs,exp))
barplot(counts, beside=TRUE)
counts <- as.matrix(data.frame(obs,exp))
counts
install(ape)
install.packages("ape")
tree_file <-"C:/Users/weidewind/Documents/CMD/Coevolution/Influenza/Kryazhimsky11/Mock/h1.l.r.newick"
output_file <- "C:/Users/weidewind/Documents/CMD/Coevolution/Influenza/Kryazhimsky11/Mock/h1_distance_matrix.csv"
tree<-read.tree(tree_file)
#PatristicDistMatrix<-cophenetic(tree) #between leafs
PatristicDistMatrix<-dist.nodes(tree) # between all nodes
#hist(PatristicDistMatrix[lower.tri(PatristicDistMatrix)],breaks=seq(from=0, to=400, by=10))
dimnames(PatristicDistMatrix) = list(c(tree$tip.label, tree$node.label), c(tree$tip.label, tree$node.label))
write.csv(PatristicDistMatrix, output_file)
library(ape)
tree_file <-"C:/Users/weidewind/Documents/CMD/Coevolution/Influenza/Kryazhimsky11/Mock/h1.l.r.newick"
output_file <- "C:/Users/weidewind/Documents/CMD/Coevolution/Influenza/Kryazhimsky11/Mock/h1_distance_matrix.csv"
tree<-read.tree(tree_file)
#PatristicDistMatrix<-cophenetic(tree) #between leafs
PatristicDistMatrix<-dist.nodes(tree) # between all nodes
#hist(PatristicDistMatrix[lower.tri(PatristicDistMatrix)],breaks=seq(from=0, to=400, by=10))
dimnames(PatristicDistMatrix) = list(c(tree$tip.label, tree$node.label), c(tree$tip.label, tree$node.label))
write.csv(PatristicDistMatrix, output_file)
getwd()
parent(getwd())
file.path(dirname(getwd()), "input", "synresearch", "syn", "h1_reversals_list", fsep = .Platform$file.sep)
protein = "h1"
path = file.path(dirname(getwd()), "input", "synresearch", "syn", paste(protein, "_reversals_list", sep = ""), fsep = .Platform$file.sep)
path
dat = read.csv(path)
str(dat)
help(read.csv)
dat = read.csv(path,comment.char = "#")
str(dat)
dat = read.csv(path,comment.char = "#")
str(dat)
dat[,dat$number>5]
dat$number>5
dat[dat$number>5,]
fast = dat[dat$number>5,]
fast
help(split)
help(splitstr)
list1 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ABI96109|USA|2003;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list1 = strsplit(list, ";")
list2 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ACM90872|Australia|2008;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list2 = strsplit(list, ";")
intersect(list1, list2)
list1 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ABI96109|USA|2003;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list1 = strsplit(list1, ";")
list2 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ACM90872|Australia|2008;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list2 = strsplit(list2, ";")
intersect(list1, list2)
list1
list1 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ABI96109|USA|2003;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list1 = strsplit(list1, ";")[[1]]
list2 = "ABW81513|Denmark|2004;ABV45654|Hong_Kong|2006;ACM90872|Australia|2008;ABW23305|USA|2007;ABW23288|USA|2007;ABW23292|USA|2007"
list2 = strsplit(list2, ";")[[1]]
intersect(list1, list2)
length(intersect(list1, list2))
inter <- intersect(list1, list2)
union <-length(list1)+length(list2)-length(inter)
jaccard <- inter/union
inter <- length(intersect(list1, list2))
union <-length(list1)+length(list2)-inter
jaccard <- inter/union
jaccard
apply(dat, function(e){
print (e$list)
} )
lapply(dat, function(e){
print (e$list)
} )
lapply(dat, function(e){
print (e)
} )
indices <- lapply(dat$list, function(e){
lapply(dat$list, funtion(d){
jaccard_index(e,d)
})
} )
jaccard_index<- function(list1, list2){
list1 = strsplit(list1, ";")[[1]]
list2 = strsplit(list2, ";")[[1]]
overlap <- length(intersect(list1, list2))
union <-length(list1)+length(list2)-overlap
jaccard <- overlap/union
}
indices <- lapply(dat$list, function(e){
lapply(dat$list, funtion(d){
jaccard_index(e,d)
})
} )
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
jaccard_index<- function(list1, list2){
list1 = strsplit(list1, ";")[[1]]
print(list1)
list2 = strsplit(list2, ";")[[1]]
overlap <- length(intersect(list1, list2))
union <-length(list1)+length(list2)-overlap
jaccard <- overlap/union
}
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
print (e)
print (d)
jaccard_index(e,d)
})
} )
dat = read.csv(path,comment.char = "#")
str(dat)
dat$list
dat$list[1]
dat$list[3]
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
print (e)
print (d)
jaccard_index(e,d)
})
} )
e
strsplit("list1", ";")
dat = read.csv(path,comment.char = "#", stringsAsFactors=FALSE)
str(dat)
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
print (e)
print (d)
jaccard_index(e,d)
})
} )
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
jaccard_index<- function(list1, list2){
list1 = strsplit(list1, ";")[[1]]
list2 = strsplit(list2, ";")[[1]]
overlap <- length(intersect(list1, list2))
union <-length(list1)+length(list2)-overlap
jaccard <- overlap/union
}
indices <- lapply(dat$list, function(e){
vect <- lapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
str(indices)
length(indices)
indices[1][2]
indices[1]
indices <- sapply(dat$list, function(e){
vect <- sapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
indices[1]
indices[1][2]
str(indices)
indices[1,2]
indices[2,2]
indices[2,5]
indices
indices[indices>0,]
indices[1,]
help(hclust)
help(dist)
im <- as.matrix(indices)
im
rnames(im) <- dat$anc
rownames(im) <- dat$anc
colnames(im) <- dat$anc
im
dm <- as.dist(im)
hclust(dm)
help(hclust)
plot(hclust(dm))
clusters <- hclust(dm)
clusters
clusterCut <- cutree(clusters, 7)
table(clusterCut, dat$anc)
clusterCut[2,]
str(clusterCut)
clusterCut[clusterCut=2]
clusterCut[clusterCut=3]
clusterCut[4]
head(clusterCut)
clusterCut[clusterCut == 2]
clusterCut[clusterCut == 3]
clusterCut[clusterCut == 4]
clusterCut[clusterCut == 5]
clusterCut[clusterCut == 6]
clusterCut[clusterCut == 7]
path = file.path(dirname(getwd()), "input", "synresearch", "syn", paste(protein, "_reversals_list", sep = ""), fsep = .Platform$file.sep)
sdat = read.csv(path,comment.char = "#", stringsAsFactors=FALSE)
path = file.path(dirname(getwd()), "input", "synresearch", "nsyn", paste(protein, "_reversals_list", sep = ""), fsep = .Platform$file.sep)
ndat = read.csv(path,comment.char = "#", stringsAsFactors=FALSE)
dat <- rbind(sdat, ndat)
path = file.path(dirname(getwd()), "input", "synresearch", "nsyn", paste(protein, "_reversals_list", sep = ""), fsep = .Platform$file.sep)
ndat = read.csv(path,comment.char = "#", stringsAsFactors=FALSE)
dat <- rbind(sdat, ndat)
indices <- sapply(dat$list, function(e){
vect <- sapply(dat$list, function(d){
jaccard_index(e,d)
})
} )
im <- as.matrix(indices)
rownames(im) <- dat$anc
colnames(im) <- dat$anc
dm<- as.dist(im)
clusters <- hclust(dm)
plot(clusters)
clusterCut <- cutree(clusters, 11)
clusterCut[clusterCut == 2]
clusterCut[clusterCut == 3]
clusterCut[clusterCut == 5]
str(clusters)
library(ggplot2)
library(ggdendro)
install.packages("ggdendro")
library(ggdendro)
ggdendrogram(clusters, rotate = FALSE, size = 2)
distances <- sapply(dat$list, function(e){
vect <- sapply(dat$list, function(d){
1-jaccard_index(e,d)
})
} )
m <- as.matrix(distances)
rownames(m) <- dat$anc
colnames(m) <- dat$anc
dm<- as.dist(m)
clusters <- hclust(dm)
ggdendrogram(clusters, rotate = FALSE, size = 2)
ggdendrogram(clusters, rotate = TRUE, size = 2)
ggdendrogram(clusters, rotate = FALSE, size = 2)
clusterCut <- cutree(clusters, h=0.25)
table(clusterCut, dat$anc)
help(cutree)
length(clusterCut)
length(dat)
nrows(dat)
nrow(dat)
clusterCut <- cutree(clusters, h=0.75)
length(clusterCut)
clusters$height
clusterCut <- cutree(clusters, 11)
length(clusterCut)
clusterCut <- cutree(clusters, h=0.25)
str(clusters)
str(clusterCut)
clusterCut <- cutree(clusters, 11)
str(clusterCut)
clusterCut <- cutree(clusters, h=0.25)
clusterCut[388]
table(clusterCut, dat$anc)
tab <- table(clusterCut, dat$anc)
tab[rowsum(tab)>1,]
rowsum(tab)
rowSums(tab)
tab[rowSums(tab)>1,]
tab[rowSums(tab)>1,tab>1]
identicals <- tab[rowSums(tab)>1,]
identicals[,identicals>0]
identicals[1,identicals>0]
identicals[1,identicals[1,]>0]
for (i in 1..length(identicals)){
identicals[i,identicals[i,]>0]
}
for (i in c(1..length(identicals))){
identicals[i,identicals[i,]>0]
}
for (i in c(1:length(identicals))){
identicals[i,identicals[i,]>0]
}
c(1:length(identicals))
c(1:length(identicals))
c(1:nrows(identicals))
c(1:nrows(identicals))
c(1:nrow(identicals))
for (i in c(1:nrow(identicals))){
identicals[i,identicals[i,]>0]
}
for (i in c(1:nrow(identicals))){
print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(ancs, function(anc){
print(dat[dat$ancestor == anc, dat$num])
})
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(ancs, function(anc){
print(dat[dat$ancestor == anc,])
})
#print(identicals[i,identicals[i,]>0])
}
ancs <- identicals[1,identicals[1,]>0]
ancs
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc,])
})
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, dat$num])
})
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, ])
})
print ("-------")
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, number])
})
print ("-------")
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, 3])
})
print ("-------")
#print(identicals[i,identicals[i,]>0])
}
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, ])
})
print ("-------")
#print(identicals[i,identicals[i,]>0])
}
clusterCut <- cutree(clusters, h=0.75) # i believe that all clusters at this level contain identical elements
length(clusterCut)
tab <- table(clusterCut, dat$anc)
identicals <- tab[rowSums(tab)>1,]
for (i in c(1:nrow(identicals))){
ancs <- identicals[i,identicals[i,]>0]
sapply(names(ancs), function(anc){
print(dat[dat$ancestor == anc, ])
})
print ("-------")
#print(identicals[i,identicals[i,]>0])
}
