{
    "contents" : "library(KernSmooth)\nlibrary(ggplot2)\n\n\ndataframe_smooth_line_with_ci <- function(observed_statistics_file, bootstrap_summary_file, bootstrap_file, tag){\n  dist_file <- observed_statistics_file\n  ints_file <- bootstrap_summary_file\n  \n  file <- read.csv(bootstrap_file, header=F)\n  \n  dist_vectors <- read.csv (dist_file,  header = F, blank.lines.skip=T, stringsAsFactor=F)\n  ints_vectors <- read.csv (ints_file,  header = T, blank.lines.skip=T, stringsAsFactor=F)\n  \n  cleaned_dist<-dist_vectors[dist_vectors$V1>0,]\n  cleaned_dist$V1 <- as.integer(cleaned_dist$V1)\n  cleaned_ints<-ints_vectors[ints_vectors$X95_percentile < 19499 & ints_vectors$mean != 0,]\n  cleaned_ints$distance <- as.integer(cleaned_ints$distance)\n  \n  \n  diff<-cleaned_dist$V3-cleaned_dist$V2\n  fit.loess <-loess( diff~cleaned_dist$V1, span = 0.5, degree=1)\n  \n  #Kernel smooth all bootstrap @observations@, and olny then compute confidence intervals for the smoothed values.\n  \n  #kernSmooth smoothing\n  #lp<-locpoly(c(2:401), file[[2]], bandwidth=25, range.x=c(2,401))\n  #lps<-lapply(file[1:500], function(elm) {lp<-locpoly(c(2:401), elm, bandwidth=25, range.x=c(2,401)) \n  #                                        lp$y})\n  lp<-c(1:400)\n  lp$x<-c(1:400)\n  lps<-lapply(file[1:500], function(elm) {predict(loess( elm~c(2:460), span = 0.5, degree=1,family=\"gaussian\"), \n                                                  data.frame(x=c(2:460)))})\n  \n  #this is a vector representing all smoothed points at distance 1 (2.14 in this case): lps[[i]][1]# (i>1) \n  intervals<-c(1:400) #was 1:400\n  quantiles <- sapply(intervals, function(i){ \n    dist<-sapply(lps, function(elm) {elm[i]})\n    quantile(dist, probs = c(0.05, 0.95))\n  })\n  \n  \n  plotdata <- data.frame(distance=c(c(1:450), rep(lp$x[1:400],2)),\n                         y=c(predict (fit.loess, data.frame(x=c(1:450))), quantiles[1,], quantiles[2,]),\n                         group=c(rep(paste(tag, \"loess\", sep=\"_\"), 450),rep(paste(tag, \"bootstrap_lower\", sep=\"_\"), 400),rep(paste(tag, \"bootstrap_upper\", sep=\"_\"), 400)))\n  \n  \n}\n\nnsyndata <- dataframe_smooth_line_with_ci( observed_statistics=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_nsyn_nobins\",\n                                           bootstrap_summary_file=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_ints_nobins\",\n                                           bootstrap_file=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_shuffler_10000_1_trans\",\n                                           \"nsyn\"\n                                           )\n\nsyndata <- dataframe_smooth_line_with_ci( observed_statistics=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_syn_nobins\",\n                                           bootstrap_summary_file=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_syn_ints_nobins\",\n                                           bootstrap_file=\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/n2_syn_shuffler_10000_1_trans\",\n                                           \"syn\"\n)\n                                           \nplotdata <- merge(nsyndata, syndata)\nggplot(data=plotdata, aes(x=as.integer(distance), y=y, group=group, color=group))+geom_line()\n",
    "created" : 1464708031645.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4051876973",
    "id" : "FD2DCAB2",
    "lastKnownWriteTime" : 1438179664,
    "path" : "C:/Users/weidewind/workspace/RCoevolution/R/nsyn_to_syn.R",
    "project_path" : "R/nsyn_to_syn.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}